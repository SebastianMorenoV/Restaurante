/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI.Productos;

import DTOEntrada.IngredienteDTOEntrada;
import DTOSalida.IngredienteDTO;
import DTOSalida.IngredientesProductoDTO;
import DTOSalida.ProductoDTO;
import Enums.Tipo;
import GUI.Aplicacion;
import exception.NegocioException;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.Timer;
import javax.swing.ToolTipManager;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author SDavidLedesma
 */
public class RegistroProducto extends javax.swing.JPanel {

    private Aplicacion app;
    private DefaultTableModel modeloTabla;
    private ProductoDTO productoSeleccionado;

    public RegistroProducto(Aplicacion app) {
        this.app = app;
        initComponents();
        String[] columnas = {"Producto","Ingrediente", "Unidad de Medida", "Cantidad"};
        DefaultTableModel model = new DefaultTableModel(null, columnas) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        tablaIngredientes.setModel(model);

        comboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"PLATILLO", "BEBIDA", "POSTRE"}));

        //agregarDocumentListener(txtNombre);
        cargarMeotodosAux();

// Registra el MouseListener para la tabla
        tablaIngredientes.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaProductosMouseClicked(evt);
            }
        });
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblHora = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        comboBox = new javax.swing.JComboBox<>();
        txtPrecio = new javax.swing.JTextField();
        btnRegistrarProducto = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnConsulttar = new javax.swing.JButton();
        btnAgregarIngredientes = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaIngredientes = new javax.swing.JTable();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        setBackground(new java.awt.Color(216, 202, 179));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Arial Black", 1, 48)); // NOI18N
        jLabel1.setText("Registrar un Producto");

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/flechaAtras.png"))); // NOI18N
        jLabel5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblHora)
                .addGap(55, 55, 55))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addGap(116, 116, 116)
                .addComponent(jLabel1)
                .addContainerGap(172, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel5)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblHora)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel2.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jLabel2.setText("Nombre:");

        jLabel3.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jLabel3.setText("Tipo:");

        jLabel4.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jLabel4.setText("Precio:");

        comboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "PLATILLO", "BEBIDA", "POSTRE" }));

        btnRegistrarProducto.setText("Registrar Producto");
        btnRegistrarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarProductoActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");

        btnConsulttar.setText("Consular Productos");
        btnConsulttar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsulttarActionPerformed(evt);
            }
        });

        btnAgregarIngredientes.setText("Agregar Ingredientes");
        btnAgregarIngredientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAgregarIngredientesMouseClicked(evt);
            }
        });
        btnAgregarIngredientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarIngredientesActionPerformed(evt);
            }
        });

        tablaIngredientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "tile 5"
            }
        ));
        tablaIngredientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaIngredientesMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tablaIngredientes);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(txtNombre)
                            .addComponent(comboBox, 0, 196, Short.MAX_VALUE)
                            .addComponent(jLabel4)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtPrecio)
                            .addComponent(btnRegistrarProducto, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                            .addComponent(btnCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 146, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(118, 118, 118))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(btnConsulttar, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAgregarIngredientes, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(179, 179, 179))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addComponent(btnRegistrarProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnConsulttar, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAgregarIngredientes, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tablaIngredientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaIngredientesMouseClicked

    }//GEN-LAST:event_tablaIngredientesMouseClicked

    private void btnRegistrarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarProductoActionPerformed
        guardarProducto();
    }//GEN-LAST:event_btnRegistrarProductoActionPerformed

    private void btnConsulttarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsulttarActionPerformed
        app.mostrarBusquedaProducto();
    }//GEN-LAST:event_btnConsulttarActionPerformed

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
        app.mostrarMenuPrincipal();
    }//GEN-LAST:event_jLabel5MouseClicked

    private void btnAgregarIngredientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarIngredientesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAgregarIngredientesActionPerformed

    private void btnAgregarIngredientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAgregarIngredientesMouseClicked
        app.setSiguienteRegistrarProducto(true);
        app.mostrarPantallaConsultarIngredientes();
    }//GEN-LAST:event_btnAgregarIngredientesMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarIngredientes;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnConsulttar;
    private javax.swing.JButton btnRegistrarProducto;
    private javax.swing.JComboBox<String> comboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel lblHora;
    private javax.swing.JTable tablaIngredientes;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtPrecio;
    // End of variables declaration//GEN-END:variables

    private void agregarDocumentListener(JTextField textField) {
        textField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                realizarBusqueda();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                realizarBusqueda();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                realizarBusqueda();
            }
        });
    }

    // Método para realizar la búsqueda en el ProductoBO
    private void realizarBusqueda() {
        StringBuilder nombreProducto = new StringBuilder(txtNombre.getText().trim());

        ProductoDTO productoFiltro = new ProductoDTO();
        productoFiltro.setNombre(nombreProducto.toString().trim()); // Evitar espacios extra
 
        IngredienteDTO ingredientesProducto = app.getIngredienteDTO();
        // Realizar la búsqueda en el BO
        List<ProductoDTO> productosEncontrados = null; //prueba
        try {
            productosEncontrados = app.buscarProductos(productoFiltro);
            for (int i = 0; i < productosEncontrados.size(); i++) {
                ProductoDTO productoDTO = productosEncontrados.get(i);
            }
            // Actualizar la tabla con los resultados

        } catch (NegocioException ex) {
            Logger.getLogger(RegistroProducto.class.getName()).log(Level.SEVERE, null, ex);
        }
        actualizarTabla(productosEncontrados);
    }

    // Método para actualizar la tabla con los resultados de búsqueda
    private void actualizarTabla(List<ProductoDTO> productos) {
        /**
        DefaultTableModel model = (DefaultTableModel) tablaIngredientes.getModel();
        limpiarTabla(); // Limpiar tabla existente

        // Llenar la tabla con los resultados
        for (ProductoDTO producto : productos) {
            if (producto.getIngredienteProducto() != null) {
                List<IngredientesProductoDTO> listaDTO = new ArrayList<>();
                for (IngredientesProductoDTO ingredientesProductoDTO : producto.getIngredienteProducto()) {
                    IngredienteDTO ingrediente = ingredientesProductoDTO.getIngrediente();
                    model.addRow(new Object[]{
                        producto.getNombre(),
                        ingrediente.getNombre(),
                        ingrediente.getUnidadMedida(),
                        ingrediente.getStock()
                    });
                    listaDTO.add(ingredientesProductoDTO);
                }
            } else {
                //si no tiene ingredientes, agrega fila aclarandolo
                model.addRow(new Object[]{
                    "sin ingredientes",
                    "-",
                    "-"
                });
            }

        }
        * **/
    }

    private void seterToolTips() {
        txtNombre.setToolTipText("Ingrese el nombre del producto");
        txtPrecio.setToolTipText("Ingrese el precio del producto");

        ToolTipManager.sharedInstance().setInitialDelay(100);     // Espera 100 ms para aparecer
        ToolTipManager.sharedInstance().setDismissDelay(10000);   // Permanece visible 10 segundos
        ToolTipManager.sharedInstance().setReshowDelay(100);
    }

    public void cargarMeotodosAux() {
        agregarDocumentListener(txtNombre);

        seterToolTips();
    }

    public void guardarProducto() {
        String nombre = txtNombre.getText().trim();
        String txttprecio = txtPrecio.getText().trim();
        String tipoString = (String) comboBox.getSelectedItem();

        if (nombre.isEmpty() || txttprecio.isEmpty() || tipoString == null || tipoString.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Todos los campos son obligatorios");
            return; // ⬅ necesario para evitar seguir ejecutando
        }

        double precio;
        try {
            precio = Double.parseDouble(txttprecio);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "El precio debe ser un número válido");
            return;
        }

        Tipo tipo = Tipo.valueOf(tipoString);

        if (nombre.isEmpty() || txttprecio.isEmpty() || tipoString.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Todos los campos son obligatorios");
        }

        ProductoDTO producto = new ProductoDTO(nombre, precio, tipo);

        try {
            app.registrarProducto(producto);
            JOptionPane.showMessageDialog(this, "Producto registrado con exito\n " + nombre, "Registro Exitoso", JOptionPane.INFORMATION_MESSAGE);
            limpiarCampos();
        } catch (NegocioException ex) {
            JOptionPane.showMessageDialog(this, "Error al registrar el proucto : " + ex.getMessage(),
                    "Error en registro", JOptionPane.ERROR_MESSAGE);
        }
    }

    //Metodos Auxiliares.
    private void mostrarFecha() {
        Timer timer = new Timer(1000, e -> {
            LocalTime horaActual = LocalTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("hh:mm a");
            lblHora.setText(horaActual.format(formatter));
        });
        timer.start();
    }

    public void limpiarCampos() {
        txtNombre.setText("");
        txtPrecio.setText("");
    }

    public void cargarProductoDesdeConsulta() {
        /**
        List<ProductoDTO> productos = app.getProductosTemporales();
        if (productos == null || productos.isEmpty()) {
            return;
        }

        ProductoDTO producto = productos.get(0);
        txtNombre.setText(producto.getNombre());
        txtPrecio.setText(String.valueOf(producto.getPrecio()));
        comboBox.setSelectedItem(producto.getTipo());

        // Cargar ingredientes en la tabla
        DefaultTableModel model = (DefaultTableModel) tablaIngredientes.getModel();
        limpiarTabla(); // Limpiar tabla

        for (IngredientesProductoDTO ingrediente : producto.getIngredienteProducto()) {
            IngredienteDTO ing = ingrediente.getIngrediente();
            model.addRow(new Object[]{
                producto.getNombre(),
                ing.getNombre(),
                ing.getUnidadMedida(),
                ingrediente.getCantidad()
            });
        }
        * **/

    }

    private void limpiarTabla() {
        DefaultTableModel model = (DefaultTableModel) tablaIngredientes.getModel();
        model.setRowCount(0);
    }

    private void tablaProductosMouseClicked(java.awt.event.MouseEvent evt) {
        if (evt.getClickCount() == 2) { // Doble clic
            System.out.println("Doble clic detectado");
            int row = tablaIngredientes.getSelectedRow();
            if (row != -1) {
                // Suponiendo que el ID del producto está en la primera columna
                String idStr = tablaIngredientes.getValueAt(row, 0).toString();
                Long productoId = Long.valueOf(idStr);

                String productoNombre = (String) tablaIngredientes.getValueAt(row, 1); // Nombre del producto en la segunda columna

                // 🔧 CORRECCIÓN: crear nueva instancia
                this.productoSeleccionado = new ProductoDTO();
                this.productoSeleccionado.setId(productoId);
                this.productoSeleccionado.setNombre(productoNombre);

                // Redirigir a la pantalla Consultar Ingredientes
                app.mostrarPantallaConsultarIngredientes();
                
                 cargarProductoDesdeConsulta();
            }
        }
    }

}
