/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI.Productos;

import DTOEntrada.IngredienteDTOEntrada;
import DTOSalida.IngredienteDTO;
import DTOSalida.IngredientesProductoDTO;
import DTOSalida.ProductoDTO;
import Enums.Tipo;
import Enums.UnidadMedida;
import GUI.Aplicacion;
import exception.NegocioException;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.Timer;
import javax.swing.ToolTipManager;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author SDavidLedesma
 */
public class RegistroProducto extends javax.swing.JPanel {

    private Aplicacion app;
    private DefaultTableModel modeloTabla;
    private ProductoDTO productoSeleccionado;

    public RegistroProducto(Aplicacion app) {
        this.app = app;
        initComponents();
        cargarIngredientes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblHora = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        comboBox = new javax.swing.JComboBox<>();
        txtPrecio = new javax.swing.JTextField();
        btnRegistrarProducto = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnConsulttar = new javax.swing.JButton();
        btnAgregarIngredientes = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaIngredientes = new javax.swing.JTable();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        setBackground(new java.awt.Color(216, 202, 179));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Arial Black", 1, 48)); // NOI18N
        jLabel1.setText("Registrar un Producto");

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/flechaAtras.png"))); // NOI18N
        jLabel5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(1095, Short.MAX_VALUE)
                .addComponent(lblHora)
                .addGap(55, 55, 55))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addGap(231, 231, 231)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel5))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel1)))
                .addGap(27, 27, 27)
                .addComponent(lblHora)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1150, -1));

        jLabel2.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jLabel2.setText("Nombre:");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 186, -1, 39));

        jLabel3.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jLabel3.setText("Tipo:");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 276, -1, -1));

        jLabel4.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jLabel4.setText("Precio:");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 363, -1, -1));
        add(txtNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 231, 196, 39));

        comboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "PLATILLO", "BEBIDA", "POSTRE" }));
        add(comboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 314, 196, 37));
        add(txtPrecio, new org.netbeans.lib.awtextra.AbsoluteConstraints(19, 395, 195, 35));

        btnRegistrarProducto.setText("Registrar Producto");
        btnRegistrarProducto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRegistrarProductoMouseClicked(evt);
            }
        });
        btnRegistrarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarProductoActionPerformed(evt);
            }
        });
        add(btnRegistrarProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(19, 477, 195, 46));

        btnCancelar.setText("Cancelar");
        add(btnCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(19, 545, 195, -1));

        btnConsulttar.setText("Consultar Productos");
        btnConsulttar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsulttarActionPerformed(evt);
            }
        });
        add(btnConsulttar, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 540, 184, 45));

        btnAgregarIngredientes.setText("Agregar Ingredientes");
        btnAgregarIngredientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAgregarIngredientesMouseClicked(evt);
            }
        });
        btnAgregarIngredientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarIngredientesActionPerformed(evt);
            }
        });
        add(btnAgregarIngredientes, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 540, 181, 44));

        tablaIngredientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Cantidad (editable)", "Unidad Medida", "Ingrediente Nombre"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaIngredientes.setRowHeight(40);
        tablaIngredientes.getTableHeader().setResizingAllowed(false);
        tablaIngredientes.getTableHeader().setReorderingAllowed(false);
        tablaIngredientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaIngredientesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tablaIngredientes);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 150, 650, 341));
    }// </editor-fold>//GEN-END:initComponents

    private void btnRegistrarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarProductoActionPerformed
        guardarProductoNuevo();
    }//GEN-LAST:event_btnRegistrarProductoActionPerformed

    private void btnConsulttarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsulttarActionPerformed
        app.mostrarBusquedaProducto();
    }//GEN-LAST:event_btnConsulttarActionPerformed

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
        app.mostrarMenuPrincipal();
        app.setIngredientesDTO(new ArrayList<>()); // se setee nulo al salir.
    }//GEN-LAST:event_jLabel5MouseClicked

    private void btnAgregarIngredientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarIngredientesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAgregarIngredientesActionPerformed

    private void btnAgregarIngredientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAgregarIngredientesMouseClicked
        app.setSiguienteRegistrarProducto(true);
        app.mostrarPantallaConsultarIngredientes();
    }//GEN-LAST:event_btnAgregarIngredientesMouseClicked

    private void btnRegistrarProductoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRegistrarProductoMouseClicked
        guardarProductoNuevo();
    }//GEN-LAST:event_btnRegistrarProductoMouseClicked

    private void tablaIngredientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaIngredientesMouseClicked
        if (evt.getClickCount() == 2) {
            // Obtener la fila seleccionada
            int fila = tablaIngredientes.getSelectedRow();

            if (fila != -1) {  // Asegurarse de que haya una fila seleccionada
                // Obtener el modelo de la tabla
                DefaultTableModel model = (DefaultTableModel) tablaIngredientes.getModel();

                // Obtener los valores de la fila seleccionada
                Long id = Long.parseLong(model.getValueAt(fila, 0).toString()); // Columna 0: id
                Integer cantidad = Integer.parseInt(model.getValueAt(fila, 1).toString()); // Columna 1: cantidad
                UnidadMedida unidad = (UnidadMedida) model.getValueAt(fila, 2); // Columna 2: unidad (Enum)
                String nombreIngrediente = model.getValueAt(fila, 3).toString(); // Columna 3: nombre

                // Crear el DTO de ingrediente
                IngredienteDTO ingredienteDTO = new IngredienteDTO();
                ingredienteDTO.setId(id);
                ingredienteDTO.setCantidad(cantidad);
                ingredienteDTO.setUnidadMedida(unidad);
                ingredienteDTO.setNombre(nombreIngrediente);

                // Mostrar un cuadro de diálogo de confirmación
                int opcion = JOptionPane.showConfirmDialog(null, "¿Deseas eliminar esta fila?",
                        "Confirmar eliminación", JOptionPane.YES_NO_OPTION);

                if (opcion == JOptionPane.YES_OPTION) {
                    // Eliminar la fila seleccionada
                    model.removeRow(fila);
                    // Eliminar el ingrediente de la lista DTO
                  
                    app.removeIngredientesDTO(ingredienteDTO);
                }
            }
        }
    }//GEN-LAST:event_tablaIngredientesMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarIngredientes;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnConsulttar;
    private javax.swing.JButton btnRegistrarProducto;
    private javax.swing.JComboBox<String> comboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel lblHora;
    private javax.swing.JTable tablaIngredientes;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtPrecio;
    // End of variables declaration//GEN-END:variables

    private void agregarDocumentListener(JTextField textField) {
        textField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                realizarBusqueda();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                realizarBusqueda();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                realizarBusqueda();
            }
        });
    }

    // Método para realizar la búsqueda en el ProductoBO
    private void realizarBusqueda() {
        StringBuilder nombreProducto = new StringBuilder(txtNombre.getText().trim());

        ProductoDTO productoFiltro = new ProductoDTO();
        productoFiltro.setNombre(nombreProducto.toString().trim()); // Evitar espacios extra

        IngredienteDTO ingredientesProducto = app.getIngredienteDTO();
        // Realizar la búsqueda en el BO
        List<ProductoDTO> productosEncontrados = null; //prueba
        try {
            productosEncontrados = app.buscarProductos(productoFiltro);
            for (int i = 0; i < productosEncontrados.size(); i++) {
                ProductoDTO productoDTO = productosEncontrados.get(i);
            }
            // Actualizar la tabla con los resultados

        } catch (NegocioException ex) {
            Logger.getLogger(RegistroProducto.class.getName()).log(Level.SEVERE, null, ex);
        }
        actualizarTabla(productosEncontrados);
    }

    // Método para actualizar la tabla con los resultados de búsqueda
    private void actualizarTabla(List<ProductoDTO> productos) {
        /**
         * DefaultTableModel model = (DefaultTableModel)
         * tablaIngredientes.getModel(); limpiarTabla(); // Limpiar tabla
         * existente
         *
         * // Llenar la tabla con los resultados for (ProductoDTO producto :
         * productos) { if (producto.getIngredienteProducto() != null) {
         * List<IngredientesProductoDTO> listaDTO = new ArrayList<>(); for
         * (IngredientesProductoDTO ingredientesProductoDTO :
         * producto.getIngredienteProducto()) { IngredienteDTO ingrediente =
         * ingredientesProductoDTO.getIngrediente(); model.addRow(new Object[]{
         * producto.getNombre(), ingrediente.getNombre(),
         * ingrediente.getUnidadMedida(), ingrediente.getStock() });
         * listaDTO.add(ingredientesProductoDTO); } } else { //si no tiene
         * ingredientes, agrega fila aclarandolo model.addRow(new Object[]{ "sin
         * ingredientes", "-", "-" }); }
         *
         * }
         * *
         */
    }

    private void seterToolTips() {
        txtNombre.setToolTipText("Ingrese el nombre del producto");
        txtPrecio.setToolTipText("Ingrese el precio del producto");

        ToolTipManager.sharedInstance().setInitialDelay(100);     // Espera 100 ms para aparecer
        ToolTipManager.sharedInstance().setDismissDelay(10000);   // Permanece visible 10 segundos
        ToolTipManager.sharedInstance().setReshowDelay(100);
    }

    public void cargarMeotodosAux() {
        agregarDocumentListener(txtNombre);

        seterToolTips();
    }

    //Metodos Auxiliares.
    private void mostrarFecha() {
        Timer timer = new Timer(1000, e -> {
            LocalTime horaActual = LocalTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("hh:mm a");
            lblHora.setText(horaActual.format(formatter));
        });
        timer.start();
    }

    public void limpiarCampos() {
        txtNombre.setText("");
        txtPrecio.setText("");
    }

    public void guardarProductoNuevo() {
        DefaultTableModel model = (DefaultTableModel) tablaIngredientes.getModel();

        try {
            // Crear el DTO de producto una sola vez
            ProductoDTO producto = new ProductoDTO();
            producto.setNombre(txtNombre.getText());
            Tipo tipoNuevo = Tipo.valueOf(comboBox.getSelectedItem().toString()); // <-- Aquí se hace bien la conversión
            producto.setTipo(tipoNuevo);
            producto.setPrecio(Double.parseDouble(txtPrecio.getText()));

            System.out.println("Antes de registrar producto");
            ProductoDTO productoInsertado = app.registrarProducto(producto);
            System.out.println("Después de registrar producto");

            for (int i = 0; i < model.getRowCount(); i++) {
                // Obtener datos de cada fila de la tabla
                Long id = Long.parseLong(model.getValueAt(i, 0).toString());
                Integer cantidad = Integer.parseInt(model.getValueAt(i, 1).toString());  // Columna 0: cantidad
                UnidadMedida unidad = (UnidadMedida) model.getValueAt(i, 2);            // Columna 1: unidad (Enum)
                String nombreIngrediente = model.getValueAt(i, 3).toString();           // Columna 2: nombre

                // Crear el DTO de ingrediente
                IngredienteDTO ingredienteDTO = new IngredienteDTO();
                ingredienteDTO.setId(id);
                ingredienteDTO.setCantidad(cantidad);
                ingredienteDTO.setUnidadMedida(unidad);
                ingredienteDTO.setNombre(nombreIngrediente);

                // Crear el DTO de relación Ingrediente-Producto
                IngredientesProductoDTO ingredienteProductoDTO = new IngredientesProductoDTO();
                ingredienteProductoDTO.setCantidad(cantidad);
                ingredienteProductoDTO.setIngrediente(ingredienteDTO);
                ingredienteProductoDTO.setProducto(productoInsertado);

                System.out.println("Registrando relación: " + ingredienteProductoDTO);

                // Registrar la relación Ingrediente-Producto
                app.registrarIngredienteProducto(ingredienteProductoDTO);
            }

            JOptionPane.showMessageDialog(null, "Producto registrado correctamente.");
        } catch (NegocioException ex) {
            Logger.getLogger(RegistroProducto.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Error al registrar el producto: " + ex.getMessage());
        } catch (Exception ex) {
            Logger.getLogger(RegistroProducto.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Error inesperado: " + ex.getMessage());
        }
    }

    public void cargarIngredientes() {
        List<IngredienteDTO> ingredientesDTO = app.getIngredientesDTO();

        if (ingredientesDTO == null || ingredientesDTO.isEmpty()) {
            return; // Salir si la lista está vacía o es null
        }

        DefaultTableModel model = (DefaultTableModel) tablaIngredientes.getModel();
        model.setRowCount(0); // Limpiar tabla antes de cargar

        for (IngredienteDTO ingredienteDTO : ingredientesDTO) {
            model.addRow(new Object[]{
                ingredienteDTO.getId(),
                ingredienteDTO.getCantidad(),
                ingredienteDTO.getUnidadMedida(),
                ingredienteDTO.getNombre()
            });
        }
    }

    public void cargarProductoDesdeConsulta() {
        /**
         * List<ProductoDTO> productos = app.getProductosTemporales(); if
         * (productos == null || productos.isEmpty()) { return; }
         *
         * ProductoDTO producto = productos.get(0);
         * txtNombre.setText(producto.getNombre());
         * txtPrecio.setText(String.valueOf(producto.getPrecio()));
         * comboBox.setSelectedItem(producto.getTipo());
         *
         * // Cargar ingredientes en la tabla DefaultTableModel model =
         * (DefaultTableModel) tablaIngredientes.getModel(); limpiarTabla(); //
         * Limpiar tabla
         *
         * for (IngredientesProductoDTO ingrediente :
         * producto.getIngredienteProducto()) { IngredienteDTO ing =
         * ingrediente.getIngrediente(); model.addRow(new Object[]{
         * producto.getNombre(), ing.getNombre(), ing.getUnidadMedida(),
         * ingrediente.getCantidad() }); } *
         */

    }

    private void limpiarTabla() {
        DefaultTableModel model = (DefaultTableModel) tablaIngredientes.getModel();
        model.setRowCount(0);
    }

}
