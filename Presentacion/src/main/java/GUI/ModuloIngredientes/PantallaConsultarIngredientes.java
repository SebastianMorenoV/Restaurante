package GUI.ModuloIngredientes;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
import DTOEntrada.IngredienteDTOEntrada;
import DTOSalida.IngredienteDTO;
import Enums.UnidadMedida;
import GUI.Aplicacion;
import exception.NegocioException;
import java.awt.Color;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sebastian Moreno
 */
public class PantallaConsultarIngredientes extends javax.swing.JPanel {

    /**
     * Creates new form MenuPrincipalRestaurante
     */
    Aplicacion app;

    public PantallaConsultarIngredientes(Aplicacion app) {
        this.app = app;
        initComponents();
        cbxUnidades.setUI(null);
        cbxUnidades.setUI(new javax.swing.plaf.basic.BasicComboBoxUI());
        cbxUnidades.setBackground(Color.WHITE);
        configurarTablaIngredientes();
        cargarDatosTabla();

        // Escuchadores
        agregarDocumentListener(inputNombre);
        agregarActionListener(cbxUnidades);

        tableIngredientes.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (evt.getClickCount() == 2 && app.isSiguienteRegistrarProducto() == true) { // Doble clic
                    int filaSeleccionada = tableIngredientes.getSelectedRow();
                    if (filaSeleccionada != -1) {
                        Long id = (Long) tableIngredientes.getValueAt(filaSeleccionada, 0);
                        String nombre = (String) tableIngredientes.getValueAt(filaSeleccionada, 1);
                        String valorUnidad = (String) tableIngredientes.getValueAt(filaSeleccionada, 2);
                        UnidadMedida unidad = UnidadMedida.valueOf(valorUnidad); // 
                        int stock = (int) tableIngredientes.getValueAt(filaSeleccionada, 3);

                        IngredienteDTO ingredienteSeleccionado = new IngredienteDTO(id, nombre, stock, unidad);

                        String mensaje = "<html>"
                                + "Â¿Desea seleccionar el ingrediente?<br>"
                                + ingredienteSeleccionado.getNombre() + ", unidad de medida: " + ingredienteSeleccionado.getUnidadMedida()
                                + "</html>";

                        int mensajeModificar = JOptionPane.showConfirmDialog(
                                null,
                                mensaje,
                                " ",
                                JOptionPane.YES_NO_OPTION
                        );

                        if (mensajeModificar == JOptionPane.YES_OPTION) {
                            String respuesta = JOptionPane.showInputDialog(
                                    null,
                                    "Ingresa la cantidad requerida: "
                            );
 
                            int cantidadRequerida = Integer.parseInt(respuesta);
                            IngredienteDTO dTOEntrada = new IngredienteDTO();
                            dTOEntrada.setId(id);
                            dTOEntrada.setNombre(nombre);
                            dTOEntrada.setStock(stock);
                            dTOEntrada.setUnidadMedida(unidad);
                            dTOEntrada.setCantidad(cantidadRequerida);
                            
                            app.setIngredienteDTO(dTOEntrada);
                            //Aqui iria lo de 
                            app.setSiguienteRegistrarProducto(false);
                            app.mostrarRegistroProducto();
                            
                        }
                    }
                }

            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlHeader = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableIngredientes = new javax.swing.JTable();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        panelRound2 = new GUI.PanelRound();
        inputNombre = new javax.swing.JTextField();
        panelRound3 = new GUI.PanelRound();
        cbxUnidades = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(216, 202, 179));
        setForeground(new java.awt.Color(216, 202, 179));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnlHeader.setBackground(new java.awt.Color(255, 255, 255));

        jLabel4.setBackground(new java.awt.Color(0, 0, 0));
        jLabel4.setFont(new java.awt.Font("Plus Jakarta Sans", 1, 100)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel4.setText("Consultar Ingrediente");
        jLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout pnlHeaderLayout = new javax.swing.GroupLayout(pnlHeader);
        pnlHeader.setLayout(pnlHeaderLayout);
        pnlHeaderLayout.setHorizontalGroup(
            pnlHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHeaderLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jLabel4)
                .addContainerGap(65, Short.MAX_VALUE))
        );
        pnlHeaderLayout.setVerticalGroup(
            pnlHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHeaderLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel4)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        add(pnlHeader, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1150, 180));

        jSeparator3.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 180, 1150, 10));

        tableIngredientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Codigo", "Ingrediente", "Unidad de medida", "Stock"
            }
        ));
        tableIngredientes.getTableHeader().setResizingAllowed(false);
        tableIngredientes.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tableIngredientes);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(512, 250, 570, 340));

        jLabel12.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel12.setText("Inventario de ingredientes");
        add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(651, 210, 290, -1));

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel13.setText("Unidad de medida:");
        add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 360, -1, -1));

        panelRound2.setBackground(new java.awt.Color(255, 255, 255));
        panelRound2.setRoundBottomLeft(30);
        panelRound2.setRoundBottomRight(30);
        panelRound2.setRoundTopLeft(30);
        panelRound2.setRoundTopRight(30);

        inputNombre.setBorder(null);
        inputNombre.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        inputNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputNombreActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelRound2Layout = new javax.swing.GroupLayout(panelRound2);
        panelRound2.setLayout(panelRound2Layout);
        panelRound2Layout.setHorizontalGroup(
            panelRound2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelRound2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(inputNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panelRound2Layout.setVerticalGroup(
            panelRound2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelRound2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(inputNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        add(panelRound2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 290, 250, 50));

        panelRound3.setBackground(new java.awt.Color(255, 255, 255));
        panelRound3.setRoundBottomLeft(30);
        panelRound3.setRoundBottomRight(30);
        panelRound3.setRoundTopLeft(30);
        panelRound3.setRoundTopRight(30);
        panelRound3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cbxUnidades.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        cbxUnidades.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TODOS", "GRAMOS", "PIEZAS", "MILILITROS" }));
        cbxUnidades.setBorder(null);
        cbxUnidades.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        cbxUnidades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxUnidadesActionPerformed(evt);
            }
        });
        panelRound3.add(cbxUnidades, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 230, 50));

        add(panelRound3, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 400, 250, 50));

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel14.setText("Nombre:");
        add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 260, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void cbxUnidadesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxUnidadesActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_cbxUnidadesActionPerformed

    private void inputNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputNombreActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cbxUnidades;
    private javax.swing.JTextField inputNombre;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator3;
    private GUI.PanelRound panelRound2;
    private GUI.PanelRound panelRound3;
    private javax.swing.JPanel pnlHeader;
    private javax.swing.JTable tableIngredientes;
    // End of variables declaration//GEN-END:variables

    // MÃ©todo para agregar DocumentListener a los JTextFields
    private void agregarDocumentListener(JTextField textField) {
        textField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                realizarBusqueda();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                realizarBusqueda();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                realizarBusqueda();
            }
        });
    }

    private void agregarActionListener(JComboBox<String> comboBox) {
        comboBox.addActionListener(e -> realizarBusqueda());

    }

    //Falta cargar datos en tabla y eliminar ingrediente de la tabla con doble click
    private void configurarTablaIngredientes() {
        DefaultTableModel modelo = new DefaultTableModel(
                new Object[][]{},
                new String[]{"CÃ³digo", "Ingrediente", "Unidad de medida", "Stock"}
        ) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Hace que todas las celdas sean no editables
            }
        };

        tableIngredientes.setModel(modelo);
    }

    private void cargarDatosTabla() {
        try {
            // Crear un filtro vacÃ­o (sin nombre y sin unidad de medida)
            IngredienteDTO filtro = new IngredienteDTO();
            filtro.setNombre(""); // Nombre vacÃ­o
            filtro.setUnidadMedida(null); // Sin unidad (equivale a "TODOS")

            // Usar buscarIngredientes con el filtro vacÃ­o
            List<IngredienteDTO> ingredientes = app.buscarIngredientes(filtro);

            DefaultTableModel model = (DefaultTableModel) tableIngredientes.getModel();
            model.setRowCount(0); // Limpiar tabla existente

            for (IngredienteDTO ingrediente : ingredientes) {
                model.addRow(new Object[]{
                    ingrediente.getId(),
                    ingrediente.getNombre(),
                    ingrediente.getUnidadMedida(),
                    ingrediente.getStock()
                });
            }

        } catch (NegocioException ex) {
            ex.printStackTrace();
        }
    }

    private void realizarBusqueda() {
        String nombre = inputNombre.getText().trim();
        String unidadSeleccionada = (String) cbxUnidades.getSelectedItem();
        UnidadMedida unidadMedida = null;

        // Validar y convertir unidad seleccionada
        if (unidadSeleccionada != null && !unidadSeleccionada.isEmpty()) {
            try {
                if (unidadSeleccionada.equals("TODOS")) {
                    // Cuando se selecciona "TODOS", solo se busca por nombre
                    unidadMedida = null;
                } else {
                    unidadMedida = UnidadMedida.valueOf(unidadSeleccionada);
                }
            } catch (IllegalArgumentException e) {
                unidadMedida = null;
            }
        } else {
            unidadMedida = null;
        }

        // Crear filtro DTO
        IngredienteDTO filtro = new IngredienteDTO();
        filtro.setNombre(nombre);
        filtro.setUnidadMedida(unidadMedida); // puede ser null si no se seleccionÃ³ nada o si es "TODOS"

        List<IngredienteDTO> ingredientesFiltrados = null;
        try {
            // Usar el filtro en la bÃºsqueda
            ingredientesFiltrados = app.buscarIngredientes(filtro);
        } catch (NegocioException ex) {
            Logger.getLogger(PantallaConsultarIngredientes.class.getName()).log(Level.SEVERE, null, ex);
        }
        llenarTablaIngredientes(ingredientesFiltrados);
    }

    private void llenarTablaIngredientes(List<IngredienteDTO> ingredientes) {
        DefaultTableModel model = (DefaultTableModel) tableIngredientes.getModel();
        model.setRowCount(0); // Limpiar tabla antes de agregar nuevas filas

        for (IngredienteDTO ingrediente : ingredientes) {
            model.addRow(new Object[]{
                ingrediente.getId(),
                ingrediente.getNombre(),
                ingrediente.getUnidadMedida() != null ? ingrediente.getUnidadMedida().name() : "N/A",
                ingrediente.getStock() // Formatear si es necesario
            });
        }
    }

    //Auxiliares
    public void limpiarCampos() {
        inputNombre.setText("");
    }
}
